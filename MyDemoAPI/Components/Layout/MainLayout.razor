@inherits LayoutComponentBase
@inject NavigationManager router
@using System.Globalization

<MudThemeProvider Theme="@_theme" IsDarkMode="_isDarkMode" />

<InitializeTimeZone />
<MudPopoverProvider />
<MudDialogProvider
    FullWidth="true"
    MaxWidth="MaxWidth.Medium"
    CloseButton="true"
    BackdropClick="true"
    Position="DialogPosition.Center"
    CloseOnEscapeKey="true"
    BackgroundClass="backdrop-blur"
/>
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h5" Class="ml-3">Application</MudText>
        <MudSpacer />
        <MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Inherit" OnClick="@DarkModeToggle" />
        <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu />
    </MudDrawer>
    <MudMainContent class="d-flex flex-column" Style="min-height: 100vh;">
        @if(_items.Count() > 2)
        {
            <MudBreadcrumbs Items="_items"></MudBreadcrumbs>
        }
        @Body
    </MudMainContent>
</MudLayout>


<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private bool _drawerOpen = true;
    private bool _isDarkMode = false;
    private MudTheme? _theme = null;
    private List<BreadcrumbItem> _items = new();

    protected override Task OnParametersSetAsync() {
        var uri = router.Uri.Replace(router.BaseUri, "");
        var paths = uri.Split("/");
        (_, _items) = paths.Select((x, i) => (x, i)).Aggregate(
        ("", new List<BreadcrumbItem>() { new BreadcrumbItem("Home", href: "/") }),
        (tuple, entry) => {
            var (path, list) = tuple;
            var (next, index) = entry;
            if (index == paths.Count() - 1) {
            list.Add(new BreadcrumbItem("...", href: null, disabled: true));
            return tuple;
            }
            path += $"/{next}";
            TextInfo info = CultureInfo.CurrentCulture.TextInfo;
            var label = info
            .ToTitleCase(next.ToLower().Replace("_", " "));
            @* .Replace(" ", string.Empty); *@
            list.Add(new BreadcrumbItem(label, href: path));
            return (path, list);
        }
        );
        return Task.CompletedTask;

    }
    protected override void OnInitialized()
    {
        base.OnInitialized();

        _theme = new()
        {
            PaletteLight = _lightPalette,
            PaletteDark = _darkPalette,
            LayoutProperties = new LayoutProperties()
        };
    }


    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void DarkModeToggle()
    {
        _isDarkMode = !_isDarkMode;
    }

    private readonly PaletteLight _lightPalette = new()
    {
        Black = "#110e2d",
        AppbarText = "#424242",
        AppbarBackground = "rgba(255,255,255,0.8)",
        Background = "#ebebeb", // added
        // DrawerBackground = "#ffffff",
        DrawerBackground = "#ebebeb", // added 
        GrayLight = "#e8e8e8",
        GrayLighter = "#f9f9f9",
    };

    private readonly PaletteDark _darkPalette = new()
    {
        Primary = "#7e6fff",
        Surface = "#1e1e2d",
        // Background = "#1a1a27",
        Background = "#303040",
        AppbarText = "#92929f",
        AppbarBackground = "rgba(26,26,39,0.8)",
        // DrawerBackground = "#1a1a27",
        DrawerBackground = "#303040",
        ActionDefault = "#74718e",
        ActionDisabled = "#9999994d",
        ActionDisabledBackground = "#605f6d4d",
        TextPrimary = "#b2b0bf",
        TextSecondary = "#92929f",
        TextDisabled = "#ffffff33",
        DrawerIcon = "#92929f",
        DrawerText = "#92929f",
        GrayLight = "#2a2833",
        GrayLighter = "#1e1e2d",
        Info = "#4a86ff",
        Success = "#3dcb6c",
        Warning = "#ffb545",
        Error = "#ff3f5f",
        LinesDefault = "#33323e",
        TableLines = "#33323e",
        Divider = "#292838",
        OverlayLight = "#1e1e2d80",
    };

    public string DarkLightModeButtonIcon => _isDarkMode switch
    {
        true => Icons.Material.Rounded.AutoMode,
        false => Icons.Material.Outlined.DarkMode,
    };
}


